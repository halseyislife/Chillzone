globalvar define paramReturn;
playervar define tempNum;
globalvar define explanationReturn;

globalvar define superPeople !;





rule: "Global Preparation"
    Event.OngoingGlobal
    {
        CreateHudText(FilteredArray(AllPlayers(), IsInSpawnRoom(ArrayElement()) && !ArrayElement().menuOpen), <"Welcome!">,  <" \n Welcome to <0>'s Server \n This server is Running Chillzone v.<1> \n PRESS INTERACT TO ACCESS MOD MENU! \n", HostPlayer(), version>, null, Location.Left, 0, Color.White, Color.White, Color.White, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
        CreateHudText(AllPlayers(), null, <"<0> Grandeur Hammer Creation!", AbilityIconString(Hero.Torbjorn, ButtonValue(Button.Ability2))>, <"Join Our Discord: \n grandeurhammers.com/discord">, Location.Right, 0, Color.Yellow, Color.Yellow, Color.White, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
        consoleString = " ";
    }

rule: "Prep Player Menu"
    Event.OngoingPlayer
    if (menuEnt == null)
    if (HasSpawned())
    {
        tempPlayer = <"<0>", EventPlayer()>;
        execString = " ";
        CreateHudText(EventPlayer(),
        null,
        <"Chillzone by Wattson">,
        <"current role: <0> \n Press <1> to access mod menu", role, InputBindingString(ButtonValue(Button.Interact))>,
        Location.Top,
        1,
        Color.White,
        Color.SkyBlue,
        Color.White,
        HudTextRev.String,
        Spectators.DefaultVisibility);
        menuEnt = LastTextID();
        menuAccessible = true;
        if (ArrayContains(superPeople, <"<0>", EventPlayer()>))
        {
            SmallMessage(EventPlayer(), <"Welcome <0>", EventPlayer()>);
            SmallMessage(EventPlayer(), <"Wattson has hardcoded you as an owner, you're welcome!">);
            SetRole(EventPlayer(), "Owner");
        }
        tempNum = 0;
        for (define i = 0; i < CountOf(toggableCommands); i++) // OR for (define i = 0; CountOf(AllPlayers()); 1)
            {
                boolArray[i] = [toggableCommands[i], false];
            }
        if (CountOf(FilteredArray(persistentStatuses, ArrayElement()[0] == <"<0>", EventPlayer()>)) != 0)
        {
            cmdStatusArray = FilteredArray(persistentStatuses, ArrayElement()[0] == <"<0>", EventPlayer()>)[0][1];
        }
        else {
            persistentStatuses = Append(persistentStatuses, [tempPlayer, null]);
        }
        scalar = 1;
        SetAttribute("Set Character Voice Pitch", EventPlayer(), "Num1", 1);
        StartModifyingHeroVoiceLines(EventPlayer(), RetrieveAttribute("Set Character Voice Pitch", EventPlayer(), "Num1"), true);
    }


rule: "Update Persisting Status"
    Event.OngoingPlayer
    if (FilteredArray(persistentStatuses, ArrayElement()[0] == <"<0>", EventPlayer()>)[0][1] != cmdStatusArray)
    if (cmdStatusArray != null)
    {
        persistentStatuses[IndexOfArrayValue(persistentStatuses, <"<0>", EventPlayer()>)][1] = cmdStatusArray;
    }



playervar define tempPlayer;
rule: "On Leave"
    Event.OnPlayerLeave
    {
        DestroyHudText(baseMenuEnt);
        DestroyHudText(menuEnt);
        if (ReturnBool("Rainbow", EventPlayer()))
        {
             SwitchToggle("Rainbow", false);
        }
        DestroyPortal(0, EventPlayer());
        DestroyPortal(1, EventPlayer());
        

    }