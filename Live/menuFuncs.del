
define ReturnDesc(define cmd !): FilteredArray(explanationReturn, ArrayElement()[0] == cmd)[0][1];
define LookingAtPos(define accept, define exclude, define rangeLims): RayCastHitPosition(EyePosition(), Destination(EyePosition(), FacingDirectionOf(), rangeLims), accept, exclude, false);
define ReplaceInArray(define array, define replacedValue, define newValue): InsertValueInArray(RemoveFromArray(array, replacedValue), IndexOfArrayValue(array,replacedValue), newValue);

void StoreCommand() playervar "Store Command"
{
    if (CountOf(execList || orbExecList) >= 8)
    {
        SmallMessage(EventPlayer(), <"Woah there! Too many commands!">);
        Abort();
    }
    if (ReturnBool("Admin Orb", EventPlayer()) && CountOf(argCollection) != 0 && ArrayContains(argCollection, "Admin Orb Target"))
    {
        if (orbExecList[0][0] == null)
        {
            orbExecList[0][0] = selectedCMD;
            orbExecList[0][1] = argCollection;
            orbExecList[0][2] = stringCMD;
        }
        else
        {
            orbExecList[CountOf(orbExecList)] = [selectedCMD, argCollection, stringCMD];
        }
        orbExecString = <" <0> \n ORB> <1>", orbExecString, stringCMD>;
        Abort();
    }
    if (CountOf(argCollection) == 0)
    {
        stringCMD = selectedCMD;
    }
    if (execList[0][0] == null)
    {
        execList[0][0] = selectedCMD;
        execList[0][1] = argCollection;
        execList[0][2] = stringCMD;
    }
    else
    {
        execList[CountOf(execList)] = [selectedCMD, argCollection, stringCMD];
    }
    execString = <" <0> \n CMD> <1>", execString, stringCMD>;
}

void ConsoleLog(define string !, define prefix !, define player !) playervar "Log Console"
{
    consoleString = <"<0> \n <1>", <"<<0>>   <1>: <2>", MatchTime() / 60, <"<0>(<1>)", prefix, player>, string>, consoleString>;
}

void InputHandler(define input !) playervar "Input Handler"
{
    if (selectedCMD == null)
    {
        if (ArrayContains(allowedCMDS, input))
        {
            selectedCMD = input;
            if (CountOf(ReturnParameters(selectedCMD)) == 0)
            {
                if (ReturnBool("Advance Use", EventPlayer()) || ReturnBool("Admin Orb", EventPlayer()) && ArrayContains(argCollection, "Admin Orb Target"))
                {
                    StoreCommand();
                }
                else
                {
                    ExecuteCMD(selectedCMD, EventPlayer());
                }
                ClearParams();
            }
            else
            {
                argCollection = ReturnParameters(selectedCMD);
                ParameterPrep();
                stringCMD = selectedCMD;
            }
            Abort();
        }
        else Abort();
    }
    else if (selectedCMD != null)
    {
        if (!ParamComplete(selectedCMD, argCollection))
        {
            if (currParam == "Num")
            {
                stringCMD = <"<0> <1>",stringCMD, numArg>;
                NextParameter(numArg);
            }
            else
            {
                stringCMD = <"<0> <1>",stringCMD, input>;
                NextParameter(input);
            }
        }
    }
}

void ResetMenu(define player !) playervar "ResetMenu" //hard resets menu back to 0 and updates CMDS
{
    player.selectedIndex = 0;
    player.selectedCMD = null;
    player.selectionString = <"Select a command">;
    player.stringCMD = <"No command selected">;
    player.paramIndex = null;
    player.numMin = 0;
    player.numMax = 0;
    player.numArg = 0;
    player.tempStrings[1] = " ";
    player.currParam = null;
    player.numArg = " ";
    player.argCollection = null;
    UpdateCMDS(player);
    player.refresh = true;
}
playervar define refresh;

rule: "Refresh Page"
    Event.OngoingPlayer
    if (refresh)
    {
        PageSetup(arrayCollection);
        refresh = false;
    }


void ClearParams() playervar "ClearCMD" //Allows player to continue using a command after they have finished executing
{
    paramIndex = null;
    numMin = 0;
    numMax = 0;
    numArg = 0;
    currParam = null;
    numArg = " ";
    argCollection = null;
    if (CountOf(ReturnParameters(selectedCMD)) == 0)
    {
        selectedCMD = null;
        stringCMD = <"No command selected">;
        UpdateCMDS(EventPlayer());
    }
    else
    {
        argCollection = ReturnParameters(selectedCMD);
        ParameterPrep();
        selectedIndex = 0;
        stringCMD = selectedCMD;
    }
}

void UpdateCMDS(define player !) playervar "Update CMDS" //will simply update a players allowed CMDS
{
    if (player.argCollection == null)
    {
        player.arrayCollection = player.allowedCMDS;
        if (player.selectedIndex > CountOf(player.arrayCollection) - 1)
        {
            player.selectedIndex = 0; //prevents menu from breaking because of an over index leap
        }
    }
}



rule: "Update Command Desc"
    Event.OngoingPlayer
    if (menuOpen)
    if (selectedCMD == null)
    if (tempStrings[2] != <"Command Description: <0>", ReturnDesc(currPage[selectedIndex])>)
    {
        tempStrings[2] = <"Command Description: <0>", ReturnDesc(currPage[selectedIndex])>;
        Wait(0.1);
        LoopIfConditionIsTrue();
    }

rule: "Update Command Desc"
    Event.OngoingPlayer
    if (menuOpen)
    if (selectedCMD != null)
    if (tempStrings[2] != <"Command Description: <0>", ReturnDesc(selectedCMD)>)
    {
        tempStrings[2] = <"Command Description: <0>", ReturnDesc(selectedCMD)>;
        Wait(0.1);
        LoopIfConditionIsTrue();
    }
