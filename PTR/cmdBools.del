

playervar define boolArray; //personal bools
//[0] = cmd names
//[1] = boolean value
//[2] = string value





playervar define menuAccessible !;



playervar define noclipPos;

playervar define rainbowEnts !;
globalvar define rainbowAni;
globalvar define rainbowDest;
globalvar define standardAngle;

globalvar define pauseMatchTime !;

rule: "Pause Time"
    Event.OngoingGlobal
    if (pauseMatchTime)
    {
        PauseMatchTime();
    }

rule: "UnPause Time"
    Event.OngoingGlobal
    if (!pauseMatchTime)
    {
        UnpauseMatchTime();
    }







rule: "Instant Ult"
    Event.OngoingPlayer
    if (ReturnBool("Instant Ultimate", EventPlayer()))
    if (UltimateChargePercent(EventPlayer()) != 100)
    if (!menuOpen)
    {
        SetUltimateCharge(EventPlayer(), 100);
        Wait(0.75);
        LoopIfConditionIsTrue();
    }

rule: "Bunny Jumps"
    Event.OngoingPlayer
    if (ReturnBool("Bunny Jumps", EventPlayer()))
    if (IsOnGround())
    {
        ApplyImpulse(EventPlayer(), Up(), RandomInteger(6, 15), Relative.ToWorld, ContraryMotion.Incorporate);
    }

rule: "Double Jump"
    Event.OngoingPlayer
    if (ReturnBool("Infinite Jump", EventPlayer()))
    if (IsButtonHeld(EventPlayer(), Button.Jump))
    {
        ApplyImpulse(EventPlayer(), Up(), 10, Relative.ToWorld, ContraryMotion.Cancel);
        Wait(0.16);
        LoopIfConditionIsTrue();
    }



rule: "Spam Abilities Active"
    Event.OngoingPlayer
    if (ArrayContains([Hero.Ana, Hero.Mccree], HeroOf(EventPlayer())))
    if (ReturnBool("Spam Abilities", EventPlayer()))
    if (!menuOpen)
    if (IsButtonHeld(EventPlayer(), Button.Ability1))
    {
        SetAbility1Enabled(EventPlayer(), false);
        SetAbilityCooldown(EventPlayer(), ButtonValue(Button.Ability2), 0);
        CancelPrimaryAction(EventPlayer());
        Wait(0.017);
        PressButton(EventPlayer(), Button.Ability2);
        LoopIfConditionIsTrue();
        SetAbility1Enabled(EventPlayer(), true);
    }


rule: "Spam Abilities Active"
    Event.OngoingPlayer
    if (ReturnBool("Spam Abilities", EventPlayer()))
    if (!menuOpen)
    if (IsButtonHeld(EventPlayer(), Button.Reload))
    {
        SetAbilityCooldown(EventPlayer(), ButtonValue(Button.Melee), 0);
        CancelPrimaryAction(EventPlayer());
        PressButton(EventPlayer(), Button.Melee);
        Wait(0.032);
        LoopIfConditionIsTrue();
    }





rule: "Aimbot Lock On"
    Event.OngoingPlayer
    if (ReturnBool("Aimbot", EventPlayer()))
    if (IsButtonHeld(EventPlayer(), Button.Ability2))
    if (!menuOpen)
    {
        StartFacing(EventPlayer(), DirectionTowards(EyePosition(EventPlayer()), EyePosition(PlayerClosestToReticle(EventPlayer(), OppositeTeamOf(TeamOf(EventPlayer()))))), 10000, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
    }


rule: "Aimbot Lock Off"
    Event.OngoingPlayer
    if (!ReturnBool("Aimbot", EventPlayer()) || menuOpen || !IsButtonHeld(EventPlayer(), Button.Ability2))
    {
        StopFacing(EventPlayer());
    }

rule: "Teleport Shoot"
    Event.OngoingPlayer
    if (ReturnBool("Teleport Shoot", EventPlayer()))
    if (IsFiringPrimary(EventPlayer()))
    {
        Teleport(EventPlayer(), LookingAtPos(AllPlayers(), EventPlayer(), 1000));
        Wait(0.1);
        LoopIfConditionIsTrue();
    }








rule: "Loops Start"
    Event.OngoingGlobal
    {
        ChaseVariableAtRate(rainbowAni, rainbowDest, 1, RateChaseReevaluation.DestinationAndRate);
        ChaseVariableOverTime(standardAngle, 360, 1, TimeChaseReevaluation.DestinationAndDuration);
        standardAngle = 0;
        rainbowDest = 0.40;
    }

rule: "Loop"
    Event.OngoingGlobal
    if (standardAngle == 360)
    {
        standardAngle = 0;
        Wait(1);
        LoopIfConditionIsTrue();
    }


rule: "Loop Rainbow"
    Event.OngoingGlobal
    if (rainbowAni == 1.45)
    {
        rainbowDest = 0.40;
    }

rule: "Loop Rainbow"
    Event.OngoingGlobal
    if (rainbowAni == 0.40)
    {
        rainbowDest = 1.45;
    }




define ReturnBool(define cmd !, define player !): FilteredArray(player.boolArray, ArrayElement()[0] == cmd)[0][1];
define ReturnToggleString(define cmd !, define player !): FilteredArray(player.boolArray, ArrayElement()[0] == cmd)[0][2];
void SwitchToggle(define cmd !, define bool !) playervar  "Switch"
{
    boolArray[IndexOfArrayValue(toggableCommands, cmd)][1] = bool;
    if (bool == true)
    {
        OnToggle(cmd);
    }
    else if (bool == false)
    {
        OffToggle(cmd);
    }
}

void OnToggle(define cmd !) playervar "OnToggle"
{
    switch (cmd)
    {
        case "Noclip": {
        noclipPos = PositionOf();
        StartForcingPlayerPosition(EventPlayer(), noclipPos, true);
        ChaseVariableAtRate(noclipPos, noclipPos + Up() * IsButtonHeld(EventPlayer(), Button.Jump) + Down() * IsButtonHeld(EventPlayer(), Button.Crouch) + WorldVectorOf(Vector(XOf(ThrottleOf()), ZOf(ThrottleOf()) * SineFromDegrees(null - VerticalFacingAngleOf()), ZOf(ThrottleOf()) * CosineFromDegrees(VerticalFacingAngleOf())), EventPlayer(), LocalVector.Rotation), 10 * IsButtonHeld(EventPlayer(), Button.Ability1) + 10 * Min(true, (IsButtonHeld(EventPlayer(), Button.Jump) || IsButtonHeld(EventPlayer(), Button.Crouch)) + SquareRoot(DotProduct(ThrottleOf(EventPlayer()), ThrottleOf(EventPlayer())))), RateChaseReevaluation.DestinationAndRate);
        } break;
        case "Invisible": {
            SetInvisible(EventPlayer(), InvisibleTo.All);
        } break;
        case "Invincibility": {
            SetStatus(EventPlayer(), null, Status.Invincible, 9999);
        } break;
        case "Console": {
            consoleViewers = Append(consoleViewers, EventPlayer());
        } break;
        case "Rainbow": {
            CreateEffect(AllPlayers(), Effect.Ring, Color.Purple, EventPlayer(), rainbowAni - 0.1, EffectRev.VisibleToPositionAndRadius);
            rainbowEnts[0] = LastCreatedEntity();
            CreateEffect(AllPlayers(), Effect.Ring, Color.Blue, EventPlayer(), rainbowAni - 0.2, EffectRev.VisibleToPositionAndRadius);
            rainbowEnts[1] = LastCreatedEntity();
            CreateEffect(AllPlayers(), Effect.Ring, Color.Aqua, EventPlayer(), rainbowAni - 0.3, EffectRev.VisibleToPositionAndRadius);
            rainbowEnts[2] = LastCreatedEntity();
            CreateEffect(AllPlayers(), Effect.Ring, Color.LimeGreen, EventPlayer(), rainbowAni - 0.4, EffectRev.VisibleToPositionAndRadius);
            rainbowEnts[3] = LastCreatedEntity();
            CreateEffect(AllPlayers(), Effect.Ring, Color.Green, EventPlayer(), rainbowAni - 0.5, EffectRev.VisibleToPositionAndRadius);
            rainbowEnts[4] = LastCreatedEntity();
            CreateEffect(AllPlayers(), Effect.Ring, Color.Yellow, EventPlayer(), rainbowAni - 0.6, EffectRev.VisibleToPositionAndRadius);
            rainbowEnts[5] = LastCreatedEntity();
            CreateEffect(AllPlayers(), Effect.Ring, Color.Orange, EventPlayer(), rainbowAni - 0.7, EffectRev.VisibleToPositionAndRadius);
            rainbowEnts[6] = LastCreatedEntity();
            CreateEffect(AllPlayers(), Effect.Ring, Color.Red, EventPlayer(), rainbowAni - 0.8, EffectRev.VisibleToPositionAndRadius);
            rainbowEnts[7] = LastCreatedEntity();
            CreateEffect(AllPlayers(), Effect.Ring, Color.Purple, EventPlayer(), rainbowAni - 0.9, EffectRev.VisibleToPositionAndRadius);
            rainbowEnts[8] = LastCreatedEntity();
        } break;
        case "Thirdperson": {
            StartCamera(EventPlayer(), ThirdpersonPos(EventPlayer()), ThirdpersonLook(EventPlayer()), 0);
        } break;
    }
}

void OffToggle(define cmd !) playervar "Off Toggle"
{
    switch (cmd)
    {
        case "Noclip": {
            StopChasingVariable(noclipPos);
            StopForcingPlayerPosition(EventPlayer());
        } break;
        case "Invisible": {
            SetInvisible(EventPlayer(), InvisibleTo.None);
        } break;
        case "Invincibility": {
            ClearStatus(EventPlayer(), Status.Invincible);
        } break;
        case "Console": {
            consoleViewers = RemoveFromArray(consoleViewers, EventPlayer());
        } break;
        case "Rainbow": {
            foreach (define i in rainbowEnts)
            {
                DestroyEffect(i);
            }
        } break;
        case "Thirdperson": 
        {
            StopCamera();
        } break;
    }
}